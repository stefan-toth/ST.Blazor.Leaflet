@page "/shapes"

@using ST.Blazor.Leaflet.Models
@using ST.Blazor.Leaflet.Models.Events
@using System.Drawing
@inject IJSRuntime jsRuntime

<h1>Blazor Leaflet </h1>

<h3>Drag &amp; drop the Marker!</h3>

<div class="form-inline m-2">
	<div class="form-group mb-2">
		<label>Lat </label>
		<input class="form-control ml-2 mr-2" placeholder="city name" @bind="_markerLatLng.Lat" disabled="disabled"/>
	</div>

	<div class="form-group mb-2">
		<label>Lng </label>
		<input class="form-control ml-2 mr-2" placeholder="city name" @bind="_markerLatLng.Lng" disabled="disabled"/>
	</div>
</div>

<div style="height: 500px; width: 500px;">
	<LeafletMap Map="_map"/>
</div>

<div class="pt-3">
	<DrawZoneToggleButton ButtonText="Draw Rectangle" DrawHandler="_drawHandler" OnToggleCallback="_drawHandler.OnDrawRectangleToggle"/>
	<DrawZoneToggleButton ButtonText="Draw Circle" DrawHandler="_drawHandler" OnToggleCallback="_drawHandler.OnDrawCircleToggle"/>
	<DrawZoneToggleButton ButtonText="Draw Polygon" DrawHandler="_drawHandler" OnToggleCallback="_drawHandler.OnDrawPolygonToggle"/>
	<button class="btn btn-primary mb-2" @onclick="RemoveLayers">Remove Layers</button>
</div>

@code
{
	private Map _map;
	private DrawHandler _drawHandler;
	private LatLng _markerLatLng = new LatLng { Lat = 54.310062f, Lng = 9.670243f };

	protected override void OnInitialized()
	{
		var marker = new Marker(_markerLatLng)
		{
			Draggable = true,
			Title = "Marker 1",
			Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng) },
			Tooltip = new Tooltip { Content = "Click and drag to move me" }
		};

		_map = new Map(jsRuntime)
		{
			Center = _markerLatLng,
			Zoom = 18f
		};

		_map.OnInitialized += () =>
		{
			_map.AddLayer(new TileLayer
			{
				UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
				Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
			});

			List<Circle> bringtToFront = new();
			var front = NewCircle(new LatLng(_markerLatLng.Lat, _markerLatLng.Lng + 0.0003f), false);
			bringtToFront.Add(front);

			_map.AddLayer(NewCircle(new LatLng(_markerLatLng.Lat, _markerLatLng.Lng), true));
			_map.AddLayer(NewCircle(new LatLng(_markerLatLng.Lat, _markerLatLng.Lng + 0.0002f), true));
			_map.AddLayer(front);
			for (int x = 1; x < 30; x++)
			{
				for (int y = 4; y < 30; y++)
				{
					bool isOkay = (x + y != 14);
					var circle = NewCircle(new LatLng(_markerLatLng.Lat + (float)((Random.Shared.NextDouble() / 1000) * x), _markerLatLng.Lng + (float)((Random.Shared.NextDouble() / 1000) * y)), isOkay);
					_map.AddLayer(circle);
					if (!isOkay)
						bringtToFront.Add(circle);
				}
			}

			bringtToFront.ForEach(t => t.BringPathToFront(jsRuntime, _map.Id));
			_map.AddLayer(marker);
		};

		_drawHandler = new DrawHandler(_map, jsRuntime);

		marker.OnMove += OnDrag;
		marker.OnMoveEnd += OnDragEnd;
	}

	private static Circle NewCircle(LatLng position, bool isOkay)
	{
		Color color = isOkay ? Color.ForestGreen : Color.DarkRed;
		return new()
		{
			Position = position,
			Radius = 7,
			FillColor = color,
			FillOpacity = 0.5,
			Fill = true,
			StrokeColor = color,
			StrokeOpacity = (isOkay ? 0.6 : 1),
			StrokeWidth = 4
		};
	}


	private void OnDrag(Marker marker, DragEvent evt)
	{
		_markerLatLng = evt.LatLng;
		StateHasChanged();
	}

	private async void OnDragEnd(Marker marker, Event e)
	{
		marker.Position = _markerLatLng;
		marker.Popup.Content = string.Format("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
		await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
	}

	private void RemoveLayers()
	{
		_map.RemoveAllLayersOfType<Path>();
	}
}