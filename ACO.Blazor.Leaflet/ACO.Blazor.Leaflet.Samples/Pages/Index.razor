@page "/"
@using System.Drawing
@using ACO.Blazor.Leaflet.Models
@inject CityService cityService
@inject IJSRuntime jsRuntime

<h1>Blazor Leaflet</h1>

<div class="form-inline m-2">
	<div class="form-group mb-2">
		<label>Tell me more about </label>
		<input class="form-control ml-2 mr-2" placeholder="city name" @oninput="args => FindCity(args.Value as string)"/>
		<ol>
			@foreach (var city in _cities)
			{
				<li style="cursor: pointer; color: blue; text-decoration:underline" @onclick="() => AddCity(city)">@city.Name</li>
			}
		</ol>
	</div>
	<button class="btn btn-primary mb-2" @onclick="ZoomMap">Zoom</button>
	<button class="btn btn-primary mb-2" @onclick="PanToNY">Pan to New York</button>
	<button class="btn btn-primary mb-2" @onclick="RemoveLayers">Remove Layers</button>
	<button class="btn btn-primary mb-2" @onclick="OpenPopup">Open Popup</button>
</div>

<div style="height: 500px; width: 500px;">
	<LeafletMap Map="_map"/>
</div>
<tbody>
<tr>
	<td>Map Bounds:</td><td>@_map.Bounds?.ToString()</td>
</tr>
<tr>
	<td>Center:</td><td>@_map.Center.Lat , @_map.Center.Lng</td>
</tr>
<tr>
	<td>Zoom:</td><td>@_map.Zoom</td>
</tr>
</tbody>

@code
{
	private Map? _map;

	private Circle? _circle;
	private IEnumerable<City> _cities = Enumerable.Empty<City>();

	protected override void OnInitialized()
	{
		FindCity(null);
		_map = new Map(jsRuntime)
		{
			Center = _startAt,
			Zoom = 4.8f,
			LayersControl = true,
		};

		_map.OnInitialized += async () =>
		{
			_map.AddLayer(new TileLayer
			{
				UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
				Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
			});

			_map.AddLayer(new TileLayer
			{
				Name = $@"OpenStreetMap DE",
				UrlTemplate = "https://tile.openstreetmap.de/{z}/{x}/{y}.png",
				Attribution = "&copy; <a href=\"https://www.openstreetmap.de\">OpenStreetMap.de</a>, &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>",
				MinimumZoom = 1,
				MaximumZoom = 19,
			});

			_map.AddLayer(new Polygon
			{
				Shape = new[]
				{ new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
				Fill = true,
				FillColor = Color.Blue,
				Popup = new Popup
				{
					Content = "How are you doing,"
				}
			});

			_map.AddLayer(new Models.Rectangle
			{
				Shape = new RectangleF(10f, 0f, 5f, 1f)
			});

			_circle = new Circle
			{
				Position = new LatLng(10f, 5f),
				Radius = 10f
			};
			_map.AddLayer(_circle);
			var markers = new[]
			{
				new Marker(54.3446f, 9.670025f) { Title = "Kiel", Popup = new Popup { Content = "Kiel" } },
				new Marker(54.35f, 10.2f) { Title = "Hamburg", Popup = new Popup { Content = "Hamburg" } }
			};

			foreach (var m in markers)
				_map.AddLayer(m);

			await _map.FitBounds(markers);
		};
		_map.OnBoundsChanged += (s, e) => this.StateHasChanged();
	}

	private LatLng _startAt = new LatLng(47.5574007f, 16.3918687f);


	private void FindCity(string? cityName)
	{
		_cities = cityService.FindCities(cityName);
	}

	private void ZoomMap()
	{
		_map?.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
	}

	private void PanToNY()
	{
		_map?.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
	}

	private void RemoveLayers()
	{
		_map?.RemoveAllLayersOfType<Marker>();
	}

	private async Task OpenPopup()
	{
		if (_map is null)
			return;
		var marker = _map.GetLayers().OfType<Marker>().FirstOrDefault();
		if (marker is null)
			return;
		await _map.OpenMarkerPopup(marker);
	}

	private async Task AddCity(City city)
	{
		if (_circle is null || _map is null)
			return;
		if (!_map.GetLayers().OfType<CityMarker>().Any(x => x.City == city))
		{
			var marker = new CityMarker(city);
			_map.AddLayer(marker);
		}
		await _map.FitBounds(_map.GetLayers().OfType<CityMarker>().Cast<Marker>().ToArray(), null);
	}
}